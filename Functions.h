#pragma once
/*******************************************************************/
/*              П Р О Т О Т И П Ы    Ф У Н К Ц И Й                 */
/*******************************************************************/

// печать начальных условий для выбора функции
void pechatusloviy();             // функция не принимает ничего, т. к. просто идёт печать

// печать сформированного массива в таблице
void pechat_tabl(int* pznachenue  // указатель на первый элемент динамического вектора 
	, int number);     // количество элементов в векторе

// создание динамического массива - вектора
void sozdanie(int** pznachenue    // адрес указателя на динамический вектор, для изменения значения указателя 
	, int& number         // количество элементов в векторе для изменения
	, int vubor);         // функция, выбранная пользователем, т.к для TS нужен массив number+1 элементов

// заполнение динамическго массива - вектора
void zapolnenie(int* pznachenue   // указатель на первый элемент динамического вектора 
	, int number        // количество элементов в векторе
	, int& search);     // ключ поиска для ввода пользователем

// формирование случайных чисел, больших ключа
int random(int search);           // передаём ключ, чтобы сформировать большие него элементы массива

// сортировка вектора-массива по возрастанию
void sort(int* pznachenue         // указатель на первый элемент динамического вектора
	, int number);            // длина динамического вектора

// удаление динамического массива - вектора
void udalenie(int* pznachenue);   // указатель на первый элемент динамического вектора

// промежуточная функция выбора функции из массива
int(*MENU(int& vubor              // функция, выбранная пользователем
	, int pechat))           // выбор, печатать ли подробно сравнения в массиве при поиске
	(int*, int, int);        // спецификация параметров функции

// печать выбранного алгоритма сортировки на экран и в файл
void pechat_mass_search(int* pznachenue      // указатель на первый элемент динамического вектора
	, int  number                            // количество элементов в векторе
	, int search);                           // ключ поиска, введённый пользователем. Для передачи в другие функции